#pragma once
#include <iostream>
#include <string>
#include <fstream>
#include <cstdlib>
#include <ctime>

void fillingSample(std::string level, std::string* table, std::string* info, int& size) {
    std::fstream readLevel;
    readLevel.open(level, std::fstream::in | std::fstream::app);
    std::string buffer;
    int i = 0;
    int j = 0;
    bool seen = true;
    while (getline(readLevel, buffer)) {
        if (buffer != ":" && seen) {
            table[i] = buffer;
            i++;
            continue;
        }
        else {
            seen = false;
        }
        if (buffer != ":") {
            info[j] = buffer;
            j++;
        }
    }
    size = i;
}

bool questionForOldUser(std::string a) {
    bool correct = false;
    while (!correct) {
        if (a == "y") {
            correct = true;
            return false;
        }
        else if (a == "n") {
            correct = true;
            return true;
        }
        else {
            std::cout << "Wrong input! Try aggain!\n";
            std::cin >> a;
        }
    }
}

void emptyMatrix(std::string* matrix, int size) {
    std::string row;
    for (int i = 0; i < size; i++) {
        row = row + '_';
    }
    for (int i = 0; i < size; i++) {
        matrix[i] = row;
    }
}

std::string chosenLevel(std::string a, unsigned int digit) {
    std::string l;
    if (a == "E" || a == "N" || a == "I" || a == "H" || a == "M") {
        l = l + a;
    }
    if (digit >= 1 && digit <= 3) {
        l = l + '.' + std::to_string(digit) + ".txt";
    }
    return l;
}

void checkForDificulty(std::string& a, bool& correct) {
    if (a == "E" || a == "N" || a == "I" || a == "H" || a == "M") {
        correct = true;
    }
    else {
        std::cout << "Wrong input! Try again:\n";
        correct = false;
        std::cin >> a;
    }
}

void getSample(std::string a, std::string* sample, std::string* info, int& size) {
    bool correct = false;
    while (!correct)
    {
        checkForDificulty(a, correct);
    }
    srand(time(0));
    unsigned int digit = 1 + rand() % 3;
    std::string level = chosenLevel(a, digit);
    fillingSample(level, sample, info, size);
}

void newUser(std::string* sample, std::string* matrix, std::string* info, int& size) {
    std::cout << "Choose dificulty:\n";
    std::cout << "(E - Easy, N - Normal, I - Intermediate, H - Hard, M - Master)\n";
    std::string a;
    std::cin >> a;
    getSample(a, sample, info, size);
    emptyMatrix(matrix, size);
}

void oldUser(std::string* sample, std::string* matrix,std::string* info, std::string name, int& size, int& lives, int& squares) {
    std::string fileName, playerLives, leftSquares, buffer;
    bool endIf = true;
    name = name + ".txt";
    std::fstream readPlayerProfile;
    readPlayerProfile.open(name, std::fstream::in | std::fstream::app);
    getline(readPlayerProfile, fileName);
    while (getline(readPlayerProfile, buffer)) {
        if (buffer != ":" && endIf) {
            matrix[size] = buffer;
            size++;
            continue;
        }
        else {
            endIf = false;
        }
        getline(readPlayerProfile, playerLives);
        getline(readPlayerProfile, leftSquares);
    }
    lives = std::stoi(playerLives);
    squares = std::stoi(leftSquares);
    fillingSample(fileName, sample, info, size);
}

void checkForUser(std::string user, std::string* sample, std::string* matrix,std::string* info, int& size, int& lives, int& squares) {
    bool condition = true;
    std::fstream read;
    read.open("LastUsers.txt", std::fstream::in | std::fstream::app);
    std::string buffer;
    while (getline(read, buffer)) {
        if (user == buffer) {
            std::cout << "Do you want to play your last saved game?(y/n)\n";
            std::string a;
            std::cin >> a;
            condition = questionForOldUser(a);
            bool breaking = condition;
            if (breaking) {
                break;
            }
            oldUser(sample, matrix, info, user, size, lives, squares);
        }
    }
    if (condition) {
        newUser(sample, matrix , info , size);
    }
}
